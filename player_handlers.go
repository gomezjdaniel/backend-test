package main

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/apex/log"
	"github.com/labstack/echo/v4"
)

func playerID(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		str := c.Param("player_id")
		if str == "" {
			return next(c)
		}

		id, err := strconv.ParseInt(str, 10, 64)
		if err != nil {
			log.WithField("player_id", str).Debug("Failed to parse `player_id` as int64")
			return echo.NewHTTPError(http.StatusBadRequest, "Invalid `player_id`")
		}

		c.Set("player_id", id)

		return next(c)
	}
}

func getPlayerID(c echo.Context) (id int64) {
	id, _ = c.Get("player_id").(int64)
	return
}

const playersTable = "players"

func (s *server) createPlayer(c echo.Context) error {
	req := new(player)
	if err := c.Bind(req); err != nil {
		log.WithError(err).Error("Invalid request")
		return c.NoContent(http.StatusBadRequest)
	}

	// Ensure PlayerID is not set.
	if req.PlayerID != 0 {
		log.WithError(fmt.Errorf("player_id was set")).Error("Invalid request")
		return c.NoContent(http.StatusUnprocessableEntity)
	}

	ret, err := s.db.Collection(playersTable).Insert(req)
	if err != nil {
		log.WithError(err).Error("Failed to insert player in the store")
		return c.NoContent(http.StatusInternalServerError)
	}

	id, err := toInt64(ret)
	if err != nil {
		log.WithError(err).Error("Failed to cast autogenerated ID after inserting a player")
		return c.NoContent(http.StatusInternalServerError)
	}

	return c.JSON(http.StatusOK, &player{
		PlayerID: id,
	})
}

func (s *server) listPlayers(c echo.Context) error {
	var filter []interface{}
	if pos := c.QueryParam("position"); pos != "" {
		val, ok := position_value[pos]
		if !ok || val == 0 {
			log.WithError(fmt.Errorf("Invalid `position` value")).Error("Invalid request")
			return echo.NewHTTPError(http.StatusUnprocessableEntity, "Invalid `position` value")
		}
		filter = append(filter, "position", val)
	}

	var err error

	limit := uint(10)
	if limitStr := c.QueryParam("limit"); limitStr != "" {
		limit, err = toUint(limitStr)
		if err != nil {
			log.WithError(fmt.Errorf("`limit` was invalid")).Error("Invalid request")
			return c.NoContent(http.StatusBadRequest)
		}
	}

	if limit > 100 {
		log.WithError(fmt.Errorf("`limit` cannot be greater than 100")).Error("Invalid request")
		return echo.NewHTTPError(http.StatusUnprocessableEntity, "`limit` cannot be greater than 100")
	}

	page := uint(1)
	if pageStr := c.QueryParam("page"); pageStr != "" {
		page, err = toUint(pageStr)
		if err != nil {
			log.WithError(fmt.Errorf("page was invalid")).Error("Invalid request")
			return c.NoContent(http.StatusBadRequest)
		}
	}

	var players []player

	err = s.db.Collection(playersTable).Find(filter...).OrderBy("player_id").
		Paginate(limit).Page(page).All(&players)
	if err != nil {
		log.WithError(err).Error("Failed to list players from the store")
		return c.NoContent(http.StatusInternalServerError)
	}

	return c.JSON(http.StatusOK, &players)
}

func toUint(str string) (uint, error) {
	val, err := strconv.ParseUint(str, 10, 64)
	if err != nil {
		return 0, err
	}
	return uint(val), nil
}

func (s *server) updatePlayer(c echo.Context) error {
	req := new(player)
	if err := c.Bind(req); err != nil {
		return err
	}

	// Ensure PlayerID is not set.
	if req.PlayerID != 0 {
		log.WithError(fmt.Errorf("player_id was set")).Error("Invalid request")
		return c.NoContent(http.StatusBadRequest)
	}

	err := s.db.Collection(playersTable).Find("player_id", getPlayerID(c)).Update(req)
	if err != nil {
		log.WithError(err).Error("Failed to update player from the store")
		return c.NoContent(http.StatusInternalServerError)
	}

	return c.NoContent(http.StatusOK)
}

func (s *server) deletePlayer(c echo.Context) error {
	err := s.db.Collection(playersTable).Find("player_id", getPlayerID(c)).Delete()
	if err != nil {
		log.WithError(err).Error("Failed to delete player from the store")
		return c.NoContent(http.StatusInternalServerError)
	}

	return c.NoContent(http.StatusOK)
}
